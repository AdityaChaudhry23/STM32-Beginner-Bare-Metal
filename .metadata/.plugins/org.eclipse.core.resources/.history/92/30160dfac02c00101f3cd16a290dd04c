#include "stm32f4xx.h"
#include <stdint.h>

#define GPIOAEN			(1U<<0)
#define UART1			(1U<<4)

#define CR1_TE			(1U<<3)
#define CR1_UE			(1U<<13)
#define SR_TXE			(1U<<7)

#define SYS_FREQ		16000000
#define APB2_CLK		SYS_FREQ
#define UART_BAUDRATE		115200


static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk,uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk,uint32_t BaudRate);
void uart1_tx_init(void);
void uart1_write(int ch);


int main(void){
	uart1_tx_init();
	while(1){
		uart1_write('Y');
	}
}

void uart1_tx_init(void){
	/*******************Configure uart gpio pin******************/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
	/*Set PA9 Mode to Alternate Function Mode*/
	GPIOA->MODER &=~ (1U<<18);
	GPIOA->MODER |= (1U<<19);
	/*Set PA9 Alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[1] |= (1U<<4);
	GPIOA->AFR[1] |= (1U<<5);
	GPIOA->AFR[1] |= (1U<<6);
	GPIOA->AFR[1] &=~ (1U<<7);
	/*Configure Uart Module*/
	/*Enable clock access to UART*/
	RCC->APB2ENR |= UART1;
	/*configure baudrate*/
	uart_set_baudrate(USART1,APB2_CLK,UART_BAUDRATE);
	/*Configure Transfer Direction*/
	USART1->CR1 = CR1_TE; //Clean Everything in the UART
	/*Enable UART Module*/
	USART1->CR1 |= CR1_UE;
}

void uart1_write(int ch){
	/*Make sure the Transmit data register is Empty*/
	while(!(USART1->SR & SR_TXE)){}
	/*Write to Transmit data register*/
	USART1->DR = (ch & 0xFF);
}

static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk,uint32_t BaudRate){
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
}


static uint16_t compute_uart_bd(uint32_t PeriphClk,uint32_t BaudRate){
	return (PeriphClk + (BaudRate / 2U)) / BaudRate;
}
