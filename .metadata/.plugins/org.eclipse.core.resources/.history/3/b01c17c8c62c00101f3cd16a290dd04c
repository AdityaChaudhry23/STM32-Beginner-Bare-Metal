/*
 * uart.c
 *
 *  Created on: May 9, 2025
 *      Author: aditya-chaudhry
 */
#include "uart.h"
#define GPIOAEN			(1U<<0)
#define UART2			(1U<<17)

#define CR1_TE			(1U<<3)
#define CR1_UE			(1U<<13)
#define SR_TXE			(1U<<7)

#define SYS_FREQ		16000000
#define APB1_CLK		SYS_FREQ
#define UART_BAUDRATE		115200

static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk,uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk,uint32_t BaudRate);

void uart2_write(int ch);


int __io_putchar(int ch){
	uart2_write(ch);
	return ch;
}

void uart2_tx_init(void){
	/*******************Configure uart gpio pin******************/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
	/*Set PA2 Mode to Alternate Function Mode*/
	GPIOA->MODER &=~ (1U<<4);
	GPIOA->MODER |= (1U<<5);
	/*Set PA2 Alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
	GPIOA->AFR[0] |= (1U<<9);
	GPIOA->AFR[0] |= (1U<<10);
	GPIOA->AFR[0] &=~ (1U<<11);
	/*Configure Uart Module*/
	/*Enable clock access to UART*/
	RCC->APB1ENR |= UART2;
	/*configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
	/*Configure Transfer Direction*/
	USART2->CR1 = CR1_TE; //Clean Everything in the UART
	/*Enable UART Module*/
	USART2->CR1 |= CR1_UE;
}

void uart2_rxtx_init(void){
	/*******************Configure uart gpio pin******************/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
	/*Set PA2 Mode to Alternate Function Mode*/
	GPIOA->MODER &=~ (1U<<4);
	GPIOA->MODER |= (1U<<5);
	/*Set PA2 Alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
	GPIOA->AFR[0] |= (1U<<9);
	GPIOA->AFR[0] |= (1U<<10);
	GPIOA->AFR[0] &=~ (1U<<11);
	/*Configure Uart Module*/
	/*Enable clock access to UART*/
	RCC->APB1ENR |= UART2;
	/*configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
	/*Configure Transfer Direction*/
	USART2->CR1 = CR1_TE; //Clean Everything in the UART
	/*Enable UART Module*/
	USART2->CR1 |= CR1_UE;
}


void uart2_write(int ch){
	/*Make sure the Transmit data register is Empty*/
	while(!(USART2->SR & SR_TXE)){}
	/*Write to Transmit data register*/
	USART2->DR = (ch & 0xFF);
}

static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk,uint32_t BaudRate){
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
}


static uint16_t compute_uart_bd(uint32_t PeriphClk,uint32_t BaudRate){
	return (PeriphClk + (BaudRate / 2U)) / BaudRate;
}
